package br.com.alepmendonca.creditcardusage.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import br.com.alepmendonca.creditcardusage.model.CreditCard;
import br.com.alepmendonca.creditcardusage.model.Store;

import br.com.alepmendonca.creditcardusage.model.CardReceipt;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CARD_RECEIPT.
*/
public class CardReceiptDao extends AbstractDao<CardReceipt, Long> {

    public static final String TABLENAME = "CARD_RECEIPT";

    /**
     * Properties of entity CardReceipt.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreditCardId = new Property(1, long.class, "creditCardId", false, "CREDIT_CARD_ID");
        public final static Property StoreId = new Property(2, long.class, "storeId", false, "STORE_ID");
        public final static Property Value = new Property(3, double.class, "value", false, "VALUE");
        public final static Property Currency = new Property(4, String.class, "currency", false, "CURRENCY");
        public final static Property Transaction = new Property(5, long.class, "transaction", false, "TRANSACTION");
        public final static Property AuthorizationDate = new Property(6, java.util.Date.class, "authorizationDate", false, "AUTHORIZATION_DATE");
    };

    private DaoSession daoSession;


    public CardReceiptDao(DaoConfig config) {
        super(config);
    }
    
    public CardReceiptDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CARD_RECEIPT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CREDIT_CARD_ID' INTEGER NOT NULL ," + // 1: creditCardId
                "'STORE_ID' INTEGER NOT NULL ," + // 2: storeId
                "'VALUE' REAL NOT NULL ," + // 3: value
                "'CURRENCY' TEXT NOT NULL ," + // 4: currency
                "'TRANSACTION' INTEGER NOT NULL ," + // 5: transaction
                "'AUTHORIZATION_DATE' INTEGER NOT NULL );"); // 6: authorizationDate
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "'IDX_CARD_RECEIPT_CREDIT_CARD_ID_STORE_ID_TRANSACTION' ON 'CARD_RECEIPT'" +
                " ('CREDIT_CARD_ID','STORE_ID','TRANSACTION');");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CARD_RECEIPT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CardReceipt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCreditCardId());
        stmt.bindLong(3, entity.getStoreId());
        stmt.bindDouble(4, entity.getValue());
        stmt.bindString(5, entity.getCurrency());
        stmt.bindLong(6, entity.getTransaction());
        stmt.bindLong(7, entity.getAuthorizationDate().getTime());
    }

    @Override
    protected void attachEntity(CardReceipt entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CardReceipt readEntity(Cursor cursor, int offset) {
        CardReceipt entity = new CardReceipt( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // creditCardId
            cursor.getLong(offset + 2), // storeId
            cursor.getDouble(offset + 3), // value
            cursor.getString(offset + 4), // currency
            cursor.getLong(offset + 5), // transaction
            new java.util.Date(cursor.getLong(offset + 6)) // authorizationDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CardReceipt entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreditCardId(cursor.getLong(offset + 1));
        entity.setStoreId(cursor.getLong(offset + 2));
        entity.setValue(cursor.getDouble(offset + 3));
        entity.setCurrency(cursor.getString(offset + 4));
        entity.setTransaction(cursor.getLong(offset + 5));
        entity.setAuthorizationDate(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CardReceipt entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CardReceipt entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCreditCardDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getStoreDao().getAllColumns());
            builder.append(" FROM CARD_RECEIPT T");
            builder.append(" LEFT JOIN CREDIT_CARD T0 ON T.'CREDIT_CARD_ID'=T0.'_id'");
            builder.append(" LEFT JOIN STORE T1 ON T.'STORE_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CardReceipt loadCurrentDeep(Cursor cursor, boolean lock) {
        CardReceipt entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CreditCard creditCard = loadCurrentOther(daoSession.getCreditCardDao(), cursor, offset);
         if(creditCard != null) {
            entity.setCreditCard(creditCard);
        }
        offset += daoSession.getCreditCardDao().getAllColumns().length;

        Store store = loadCurrentOther(daoSession.getStoreDao(), cursor, offset);
         if(store != null) {
            entity.setStore(store);
        }

        return entity;    
    }

    public CardReceipt loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CardReceipt> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CardReceipt> list = new ArrayList<CardReceipt>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CardReceipt> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CardReceipt> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
