package br.com.alepmendonca.creditcardusage.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import br.com.alepmendonca.creditcardusage.model.CardExtract;
import br.com.alepmendonca.creditcardusage.model.CardReceipt;

import br.com.alepmendonca.creditcardusage.model.CardExtractToReceipts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CARD_EXTRACT_TO_RECEIPTS.
*/
public class CardExtractToReceiptsDao extends AbstractDao<CardExtractToReceipts, Void> {

    public static final String TABLENAME = "CARD_EXTRACT_TO_RECEIPTS";

    /**
     * Properties of entity CardExtractToReceipts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ExtractId = new Property(0, long.class, "extractId", false, "EXTRACT_ID");
        public final static Property ReceiptId = new Property(1, long.class, "receiptId", false, "RECEIPT_ID");
    };

    private DaoSession daoSession;

    private Query<CardExtractToReceipts> cardExtract_ReceiptsNMQuery;

    public CardExtractToReceiptsDao(DaoConfig config) {
        super(config);
    }
    
    public CardExtractToReceiptsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CARD_EXTRACT_TO_RECEIPTS' (" + //
                "'EXTRACT_ID' INTEGER NOT NULL ," + // 0: extractId
                "'RECEIPT_ID' INTEGER NOT NULL );"); // 1: receiptId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CARD_EXTRACT_TO_RECEIPTS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CardExtractToReceipts entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getExtractId());
        stmt.bindLong(2, entity.getReceiptId());
    }

    @Override
    protected void attachEntity(CardExtractToReceipts entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CardExtractToReceipts readEntity(Cursor cursor, int offset) {
        CardExtractToReceipts entity = new CardExtractToReceipts( //
            cursor.getLong(offset + 0), // extractId
            cursor.getLong(offset + 1) // receiptId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CardExtractToReceipts entity, int offset) {
        entity.setExtractId(cursor.getLong(offset + 0));
        entity.setReceiptId(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CardExtractToReceipts entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CardExtractToReceipts entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "receiptsNM" to-many relationship of CardExtract. */
    public List<CardExtractToReceipts> _queryCardExtract_ReceiptsNM(long extractId) {
        synchronized (this) {
            if (cardExtract_ReceiptsNMQuery == null) {
                QueryBuilder<CardExtractToReceipts> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ExtractId.eq(null));
                cardExtract_ReceiptsNMQuery = queryBuilder.build();
            }
        }
        Query<CardExtractToReceipts> query = cardExtract_ReceiptsNMQuery.forCurrentThread();
        query.setParameter(0, extractId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCardExtractDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCardReceiptDao().getAllColumns());
            builder.append(" FROM CARD_EXTRACT_TO_RECEIPTS T");
            builder.append(" LEFT JOIN CARD_EXTRACT T0 ON T.'EXTRACT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN CARD_RECEIPT T1 ON T.'RECEIPT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CardExtractToReceipts loadCurrentDeep(Cursor cursor, boolean lock) {
        CardExtractToReceipts entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CardExtract cardExtract = loadCurrentOther(daoSession.getCardExtractDao(), cursor, offset);
         if(cardExtract != null) {
            entity.setCardExtract(cardExtract);
        }
        offset += daoSession.getCardExtractDao().getAllColumns().length;

        CardReceipt cardReceipt = loadCurrentOther(daoSession.getCardReceiptDao(), cursor, offset);
         if(cardReceipt != null) {
            entity.setCardReceipt(cardReceipt);
        }

        return entity;    
    }

    public CardExtractToReceipts loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CardExtractToReceipts> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CardExtractToReceipts> list = new ArrayList<CardExtractToReceipts>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CardExtractToReceipts> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CardExtractToReceipts> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
