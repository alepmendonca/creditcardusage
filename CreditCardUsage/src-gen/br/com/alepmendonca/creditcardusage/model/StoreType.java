package br.com.alepmendonca.creditcardusage.model;

import java.util.List;
import br.com.alepmendonca.creditcardusage.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import br.com.alepmendonca.creditcardusage.dao.StoreTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table STORE_TYPE.
 */
public class StoreType {

    private Long id;
    /** Not-null value. */
    private String name;
    private Long parentTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StoreTypeDao myDao;

    private StoreType parentType;
    private Long parentType__resolvedKey;

    private List<StoreType> subtypes;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public StoreType() {
    }

    public StoreType(Long id) {
        this.id = id;
    }

    public StoreType(Long id, String name, Long parentTypeId) {
        this.id = id;
        this.name = name;
        this.parentTypeId = parentTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStoreTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Long getParentTypeId() {
        return parentTypeId;
    }

    public void setParentTypeId(Long parentTypeId) {
        this.parentTypeId = parentTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public StoreType getParentType() {
        Long __key = this.parentTypeId;
        if (parentType__resolvedKey == null || !parentType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreTypeDao targetDao = daoSession.getStoreTypeDao();
            StoreType parentTypeNew = targetDao.load(__key);
            synchronized (this) {
                parentType = parentTypeNew;
            	parentType__resolvedKey = __key;
            }
        }
        return parentType;
    }

    public void setParentType(StoreType parentType) {
        synchronized (this) {
            this.parentType = parentType;
            parentTypeId = parentType == null ? null : parentType.getId();
            parentType__resolvedKey = parentTypeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StoreType> getSubtypes() {
        if (subtypes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreTypeDao targetDao = daoSession.getStoreTypeDao();
            List<StoreType> subtypesNew = targetDao._queryStoreType_Subtypes(id);
            synchronized (this) {
                if(subtypes == null) {
                    subtypes = subtypesNew;
                }
            }
        }
        return subtypes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSubtypes() {
        subtypes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
	public String toString() {
    	return getName();
    }
    // KEEP METHODS END

}
