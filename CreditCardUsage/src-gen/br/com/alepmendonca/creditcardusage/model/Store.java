package br.com.alepmendonca.creditcardusage.model;

import br.com.alepmendonca.creditcardusage.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import br.com.alepmendonca.creditcardusage.dao.StoreDao;
import br.com.alepmendonca.creditcardusage.dao.StoreTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table STORE.
 */
public class Store {

    private Long id;
    /** Not-null value. */
    private String originalName;
    private String userDefinedName;
    private Long storeTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StoreDao myDao;

    private StoreType storeType;
    private Long storeType__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Store() {
    }

    public Store(Long id) {
        this.id = id;
    }

    public Store(Long id, String originalName, String userDefinedName, Long storeTypeId) {
        this.id = id;
        this.originalName = originalName;
        this.userDefinedName = userDefinedName;
        this.storeTypeId = storeTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStoreDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getOriginalName() {
        return originalName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOriginalName(String originalName) {
        this.originalName = originalName;
    }

    public String getUserDefinedName() {
        return userDefinedName;
    }

    public void setUserDefinedName(String userDefinedName) {
        this.userDefinedName = userDefinedName;
    }

    public Long getStoreTypeId() {
        return storeTypeId;
    }

    public void setStoreTypeId(Long storeTypeId) {
        this.storeTypeId = storeTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public StoreType getStoreType() {
        Long __key = this.storeTypeId;
        if (storeType__resolvedKey == null || !storeType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreTypeDao targetDao = daoSession.getStoreTypeDao();
            StoreType storeTypeNew = targetDao.load(__key);
            synchronized (this) {
                storeType = storeTypeNew;
            	storeType__resolvedKey = __key;
            }
        }
        return storeType;
    }

    public void setStoreType(StoreType storeType) {
        synchronized (this) {
            this.storeType = storeType;
            storeTypeId = storeType == null ? null : storeType.getId();
            storeType__resolvedKey = storeTypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
	public String toString() {
    	String store = getStoreType() != null ? getStoreType().toString() + " em " : "";
    	String name = getUserDefinedName() != null ? getUserDefinedName() : getOriginalName();
    	return store + name;
    }
    // KEEP METHODS END

}
