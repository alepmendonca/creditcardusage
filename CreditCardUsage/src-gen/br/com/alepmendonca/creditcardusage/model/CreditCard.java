package br.com.alepmendonca.creditcardusage.model;

import br.com.alepmendonca.creditcardusage.dao.CreditCardDao;
import br.com.alepmendonca.creditcardusage.dao.DaoSession;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CREDIT_CARD.
 */
public class CreditCard {

    private Long id;
    private int finalNumbers;
    private String issuer;
    private String owner;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CreditCardDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CreditCard() {
    }

    public CreditCard(Long id) {
        this.id = id;
    }

    public CreditCard(Long id, int finalNumbers, String issuer, String owner) {
        this.id = id;
        this.finalNumbers = finalNumbers;
        this.issuer = issuer;
        this.owner = owner;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCreditCardDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
	if (id == null) throw new IllegalArgumentException("Property id cannot be null");
        this.id = id;
    }

    public int getFinalNumbers() {
        return finalNumbers;
    }

    public String getIssuer() {
        return issuer;
    }

    public void setIssuer(String issuer) {
	if (issuer == null) throw new IllegalArgumentException("Property issuer cannot be null");
        this.issuer = issuer;
    }

    public String getOwner() {
        return owner;
    }

    public void setOwner(String owner) {
	if (owner == null) throw new IllegalArgumentException("Property owner cannot be null");
        this.owner = owner;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void setFinalNumbers(int finalNumbers) {
    	if (finalNumbers == 0) throw new IllegalArgumentException("Property finalNumbers cannot be zero");
        this.finalNumbers = finalNumbers;
    }
    
    @Override
	public String toString() {
    	return (getIssuer() != null ? getIssuer() : "Cart√£o") + " " + getFinalNumbers();
    }
    // KEEP METHODS END

}
