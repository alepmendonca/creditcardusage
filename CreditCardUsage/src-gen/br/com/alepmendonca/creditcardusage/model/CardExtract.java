package br.com.alepmendonca.creditcardusage.model;

import java.util.List;
import br.com.alepmendonca.creditcardusage.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import br.com.alepmendonca.creditcardusage.dao.CardExtractDao;
import br.com.alepmendonca.creditcardusage.dao.CardExtractToReceiptsDao;
import br.com.alepmendonca.creditcardusage.dao.CreditCardDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.Arrays;
// KEEP INCLUDES END
/**
 * Entity mapped to table CARD_EXTRACT.
 */
public class CardExtract {

    private Long id;
    private long creditCardId;
    /** Not-null value. */
    private java.util.Date ExtractMonth;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CardExtractDao myDao;

    private CreditCard creditCard;
    private Long creditCard__resolvedKey;

    private List<CardExtractToReceipts> receiptsNM;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CardExtract() {
    }

    public CardExtract(Long id) {
        this.id = id;
    }

    public CardExtract(Long id, long creditCardId, java.util.Date ExtractMonth) {
        this.id = id;
        this.creditCardId = creditCardId;
        this.ExtractMonth = ExtractMonth;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCardExtractDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getCreditCardId() {
        return creditCardId;
    }

    public void setCreditCardId(long creditCardId) {
        this.creditCardId = creditCardId;
    }

    /** Not-null value. */
    public java.util.Date getExtractMonth() {
        return ExtractMonth;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setExtractMonth(java.util.Date ExtractMonth) {
        this.ExtractMonth = ExtractMonth;
    }

    /** To-one relationship, resolved on first access. */
    public CreditCard getCreditCard() {
        long __key = this.creditCardId;
        if (creditCard__resolvedKey == null || !creditCard__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CreditCardDao targetDao = daoSession.getCreditCardDao();
            CreditCard creditCardNew = targetDao.load(__key);
            synchronized (this) {
                creditCard = creditCardNew;
            	creditCard__resolvedKey = __key;
            }
        }
        return creditCard;
    }

    public void setCreditCard(CreditCard creditCard) {
        if (creditCard == null) {
            throw new DaoException("To-one property 'creditCardId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.creditCard = creditCard;
            creditCardId = creditCard.getId();
            creditCard__resolvedKey = creditCardId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CardExtractToReceipts> getReceiptsNM() {
        if (receiptsNM == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CardExtractToReceiptsDao targetDao = daoSession.getCardExtractToReceiptsDao();
            List<CardExtractToReceipts> receiptsNMNew = targetDao._queryCardExtract_ReceiptsNM(id);
            synchronized (this) {
                if(receiptsNM == null) {
                    receiptsNM = receiptsNMNew;
                }
            }
        }
        return receiptsNM;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetReceiptsNM() {
        receiptsNM = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public List<CardReceipt> getReceipts() {
    	CardReceipt[] receipts = new CardReceipt[getReceiptsNM().size()];
    	for (int i = 0; i < getReceiptsNM().size(); i++) {
    		receipts[i] = getReceiptsNM().get(i).getCardReceipt();
    	}
    	return Arrays.asList(receipts);
    }
    // KEEP METHODS END

}
