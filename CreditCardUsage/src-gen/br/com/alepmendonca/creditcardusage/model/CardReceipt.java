package br.com.alepmendonca.creditcardusage.model;

import br.com.alepmendonca.creditcardusage.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import br.com.alepmendonca.creditcardusage.dao.CardReceiptDao;
import br.com.alepmendonca.creditcardusage.dao.CreditCardDao;
import br.com.alepmendonca.creditcardusage.dao.StoreDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Currency;
import java.util.Locale;
// KEEP INCLUDES END
/**
 * Entity mapped to table CARD_RECEIPT.
 */
public class CardReceipt {

    private Long id;
    private long creditCardId;
    private long storeId;
    private double value;
    /** Not-null value. */
    private String currency;
    private long transaction;
    /** Not-null value. */
    private java.util.Date authorizationDate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CardReceiptDao myDao;

    private CreditCard creditCard;
    private Long creditCard__resolvedKey;

    private Store store;
    private Long store__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CardReceipt() {
    }

    public CardReceipt(Long id) {
        this.id = id;
    }

    public CardReceipt(Long id, long creditCardId, long storeId, double value, String currency, long transaction, java.util.Date authorizationDate) {
        this.id = id;
        this.creditCardId = creditCardId;
        this.storeId = storeId;
        this.value = value;
        this.currency = currency;
        this.transaction = transaction;
        this.authorizationDate = authorizationDate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCardReceiptDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getCreditCardId() {
        return creditCardId;
    }

    public void setCreditCardId(long creditCardId) {
        this.creditCardId = creditCardId;
    }

    public long getStoreId() {
        return storeId;
    }

    public void setStoreId(long storeId) {
        this.storeId = storeId;
    }

    public double getValue() {
        return value;
    }

    public void setValue(double value) {
        this.value = value;
    }

    /** Not-null value. */
    public String getCurrency() {
        return currency;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public long getTransaction() {
        return transaction;
    }

    public void setTransaction(long transaction) {
        this.transaction = transaction;
    }

    /** Not-null value. */
    public java.util.Date getAuthorizationDate() {
        return authorizationDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAuthorizationDate(java.util.Date authorizationDate) {
        this.authorizationDate = authorizationDate;
    }

    /** To-one relationship, resolved on first access. */
    public CreditCard getCreditCard() {
        long __key = this.creditCardId;
        if (creditCard__resolvedKey == null || !creditCard__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CreditCardDao targetDao = daoSession.getCreditCardDao();
            CreditCard creditCardNew = targetDao.load(__key);
            synchronized (this) {
                creditCard = creditCardNew;
            	creditCard__resolvedKey = __key;
            }
        }
        return creditCard;
    }

    public void setCreditCard(CreditCard creditCard) {
        if (creditCard == null) {
            throw new DaoException("To-one property 'creditCardId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.creditCard = creditCard;
            creditCardId = creditCard.getId();
            creditCard__resolvedKey = creditCardId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Store getStore() {
        long __key = this.storeId;
        if (store__resolvedKey == null || !store__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreDao targetDao = daoSession.getStoreDao();
            Store storeNew = targetDao.load(__key);
            synchronized (this) {
                store = storeNew;
            	store__resolvedKey = __key;
            }
        }
        return store;
    }

    public void setStore(Store store) {
        if (store == null) {
            throw new DaoException("To-one property 'storeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.store = store;
            storeId = store.getId();
            store__resolvedKey = storeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public CardReceipt(CreditCard cc, Store s, BigDecimal valor,
			Currency moeda, Calendar dataHoraAutorizacao, long autenticacao) {
		this(null, cc.getId(), s.getId(), valor.doubleValue(), 
				moeda.getCurrencyCode(), autenticacao, dataHoraAutorizacao.getTime());
	}

    public Currency getMoeda() {
    	if (getCurrency() != null)
    		return Currency.getInstance(getCurrency());
    	else
    		return Currency.getInstance(Locale.getDefault());
    }
    
    @Override
	public String toString() {
    	NumberFormat.getCurrencyInstance().setCurrency(getMoeda());
		return getStore().toString() + " - " +  
				NumberFormat.getCurrencyInstance().format(getValue());
	}
    
    public static class CardReceiptComparator implements Comparator<CardReceipt> {

		public int compare(CardReceipt arg0, CardReceipt arg1) {
			int sameCards = arg0.getCreditCard().getFinalNumbers() - arg1.getCreditCard().getFinalNumbers();
			if (sameCards == 0) {
				return arg0.getAuthorizationDate().compareTo(arg1.getAuthorizationDate());
			} else {
				return sameCards;
			}
		}
    	
    }
    // KEEP METHODS END

}
