package br.com.alepmendonca.creditcardusage.model;

import br.com.alepmendonca.creditcardusage.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import br.com.alepmendonca.creditcardusage.dao.CardExtractDao;
import br.com.alepmendonca.creditcardusage.dao.CardExtractToReceiptsDao;
import br.com.alepmendonca.creditcardusage.dao.CardReceiptDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CARD_EXTRACT_TO_RECEIPTS.
 */
public class CardExtractToReceipts {

    private long extractId;
    private long receiptId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CardExtractToReceiptsDao myDao;

    private CardExtract cardExtract;
    private Long cardExtract__resolvedKey;

    private CardReceipt cardReceipt;
    private Long cardReceipt__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CardExtractToReceipts() {
    }

    public CardExtractToReceipts(long extractId, long receiptId) {
        this.extractId = extractId;
        this.receiptId = receiptId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCardExtractToReceiptsDao() : null;
    }

    public long getExtractId() {
        return extractId;
    }

    public void setExtractId(long extractId) {
	if (extractId == null) throw new IllegalArgumentException("Property extractId cannot be null");
        this.extractId = extractId;
    }

    public long getReceiptId() {
        return receiptId;
    }

    public void setReceiptId(long receiptId) {
	if (receiptId == null) throw new IllegalArgumentException("Property receiptId cannot be null");
        this.receiptId = receiptId;
    }

    /** To-one relationship, resolved on first access. */
    public CardExtract getCardExtract() {
        long __key = this.extractId;
        if (cardExtract__resolvedKey == null || !cardExtract__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CardExtractDao targetDao = daoSession.getCardExtractDao();
            CardExtract cardExtractNew = targetDao.load(__key);
            synchronized (this) {
                cardExtract = cardExtractNew;
            	cardExtract__resolvedKey = __key;
            }
        }
        return cardExtract;
    }

    public void setCardExtract(CardExtract cardExtract) {
        if (cardExtract == null) {
            throw new DaoException("To-one property 'extractId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.cardExtract = cardExtract;
            extractId = cardExtract.getId();
            cardExtract__resolvedKey = extractId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public CardReceipt getCardReceipt() {
        long __key = this.receiptId;
        if (cardReceipt__resolvedKey == null || !cardReceipt__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CardReceiptDao targetDao = daoSession.getCardReceiptDao();
            CardReceipt cardReceiptNew = targetDao.load(__key);
            synchronized (this) {
                cardReceipt = cardReceiptNew;
            	cardReceipt__resolvedKey = __key;
            }
        }
        return cardReceipt;
    }

    public void setCardReceipt(CardReceipt cardReceipt) {
        if (cardReceipt == null) {
            throw new DaoException("To-one property 'receiptId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.cardReceipt = cardReceipt;
            receiptId = cardReceipt.getId();
            cardReceipt__resolvedKey = receiptId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
